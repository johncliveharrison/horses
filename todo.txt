days since last race, last distance, this distance, odds, last result
	

13th March - somethin wrong with that import.  Try deleting the files from that day
and recreate the day in the database. -DONE

finishing times in 2020 are number of horses  - DONE

horseage in 2019 are strange symbols  - DONE



search/scrape for jumps when creating the card.  Skip all jumps scraping

seach/scrape for abandoned race.  Use Leicester  on the 28th October as example

dont't do worldwide stakes - DONE

save the DS so that it doesn't need to be formed before the net training - DONE

copy the good nets somewhere and then try importing and training them again to see
if they improve..  - DONE/ONGOING

save the results and testcards for each day as a file that can be loaded insted of re-scraping

Make common lib for the neural net running and then make tools that use that lib, such as
repeat train over dates
repeat train changing hidden layers
run future predict

update the howto with selenium stuff.

Split the days to be processed into task lists and then run each list
in a separate class instance


results temp

0 1 2 3 - hidden layer
8 6 4 4
the total number of racee is 520
the total 1st place top 3 money is -1126.843490
the total 2nd place top 3 money is -548.109848
make automated exploration of the number of hidden layers / number of nodes in the layers

8 6 4 4 3 - hidden layer
('train-errors:', '[0.035292 , 0.033687 , 0.033584 , 0.033087 , 0.032973 ]')
('valid-errors:', '[5.38729  , 0.023056 , 0.022955 , 0.022937 , 0.02296  , 0.023022 ]')
Mean Squared Error = 0.053672949247
the total number of racee is 520
the total 1st place top 3 money is -975.171141
the total 2nd place top 3 money is 176.605303
--
the total number of racee is 440
the total 1st place top 3 money is -994.255640
the total 2nd place top 3 money is 304.380303


8 6 4 4 3 3 - hidden layer
('train-errors:', '[0.03401  , 0.033886 , 0.033908 , 0.033905 , 0.033909 ]')
('valid-errors:', '[0.383    , 0.022984 , 0.023146 , 0.023123 , 0.023244 , 0.023314 ]')
Mean Squared Error = 0.02253685879
the total number of racee is 520
the total 1st place top 3 money is -934.264340
the total 2nd place top 3 money is -5399.660444

8 6 5 5 4 3 3 - hidden layer
('train-errors:', '[0.034031 , 0.033913 , 0.033877 , 0.03385  , 0.033786 , 0.033767 , 0.033755 , 0.033755 ]')
('valid-errors:', '[0.11228  , 0.022814 , 0.023247 , 0.022918 , 0.02289  , 0.022831 , 0.022799 , 0.024094 , 0.022901 ]')
Mean Squared Error = 0.0228012929468
the total number of racee is 440 - fewer as skipping scoop6 and worldwide stakes
the total 1st place top 3 money is -880.013799
the total 2nd place top 3 money is -201.503205

12 - hidden layer
('train-errors:', '[0.025163 , 0.024496 , 0.024532 , 0.024502 , 0.02447  , 0.024566 , 0.024496 , 0.024535 , 0.024522 , 0.024478 , 0.024478 , 0.024529 , 0.024496 ]')
('valid-errors:', '[3.98683  , 0.058937 , 0.05667  , 0.056137 , 0.055131 , 0.054157 , 0.057298 , 0.054516 , 0.055017 , 0.055763 , 0.054149 , 0.054421 , 0.055933 , 0.056356 ]')
Mean Squared Error = 0.0232469469108
the total number of racee is 440
the total 1st place top 3 money is -1797.354167
the total 2nd place top 3 money is -1824.062500

10 10 - hidden layer
('train-errors:', '[0.03707  , 0.034911 , 0.034818 , 0.034703 , 0.034734 , 0.03467  , 0.034399 , 0.034574 , 0.034552 , 0.034447 , 0.03361  , 0.034541 , 0.034537 , 0.033564 , 0.018961 , 0.034902 , 0.034733 , 0.034722 ]')
('valid-errors:', '[0.493949 , 0.023967 , 0.023098 , 0.023851 , 0.023662 , 0.023393 , 0.022975 , 0.022951 , 0.022567 , 0.024804 , 0.022128 , 0.026258 , 0.022807 , 0.023798 , 0.021458 , 0.022808 , 0.022743 , 0.023594 , 0.022817 ]')
Mean Squared Error = 0.0210894441572
the total number of racee is 440
the total 1st place top 3 money is -1508.729167
the total 2nd place top 3 money is -63.495238


10 10 10 - hidden layer
('train-errors:', '[0.035566 , 0.034836 , 0.034791 , 0.034852 , 0.034801 , 0.034786 , 0.034684 , 0.034711 , 0.034751 , 0.034827 , 0.034792 ]')
('valid-errors:', '[0.565055 , 0.024474 , 0.023283 , 0.024382 , 0.024078 , 0.02352  , 0.023156 , 0.022985 , 0.023135 , 0.022968 , 0.023363 , 0.023553 ]')
Mean Squared Error = 0.0225193822161
the total number of racee is 440
the total 1st place top 3 money is -1151.983496
the total 2nd place top 3 money is -1228.041667


10 10 10 10 - hidden layer
('train-errors:', '[0.037759 , 0.034887 , 0.034706 , 0.034605 ]')
('valid-errors:', '[18.2841  , 0.023591 , 0.023237 , 0.025951 , 0.024641 ]')
Mean Squared Error = 0.0540502894668
the total number of racee is 440
the total 1st place top 3 money is -890.265651
the total 2nd place top 3 money is -471.751353

10 10 10 10 10  - hidden layer
the total number of racee is 440
the total 1st place top 3 money is -930.272565
the total 2nd place top 3 money is -1663.916667

8 6 4 4 3 - hidden layer
with sigmoid hidden layer
the total number of racee is 440
the total 1st place top 3 money is -799.670413
the total 2nd place top 3 money is -1818.159091


10 8 4 3 3 - hidden layer
('train-errors:', '[0.034016 , 0.033879 , 0.033784 , 0.033848 , 0.033845 , 0.033782 , 0.033616 , 0.0334   , 0.033787 , 0.033462 , 0.033313 , 0.033732 ]')
('valid-errors:', '[0.155316 , 0.022832 , 0.022947 , 0.022718 , 0.022625 , 0.022664 , 0.02299  , 0.022246 , 0.024307 , 0.022578 , 0.021894 , 0.023096 , 0.024303 ]')
Mean Squared Error = 0.02239759932
the total number of racee is 440
the total 1st place top 3 money is -1277.297307
the total 2nd place top 3 money is -2241.869318


8 8 4 4 3 - hidden layer
('train-errors:', '[0.034625 , 0.03388  , 0.033905 , 0.033866 , 0.033894 , 0.033892 , 0.033913 , 0.033868 , 0.03388  , 0.033838 , 0.033809 ]')
('valid-errors:', '[3.52996  , 0.023393 , 0.023353 , 0.022991 , 0.022858 , 0.023846 , 0.022866 , 0.023642 , 0.022894 , 0.022855 , 0.022934 , 0.023082 ]')
Mean Squared Error = 0.0541761418593
the total number of racee is 440
the total 1st place top 3 money is -2397.354167
the total 2nd place top 3 money is -1574.708333


8 5 4 4 3 - hidden layer
('train-errors:', '[0.033916 , 0.033718 , 0.033622 , 0.033565 , 0.033397 , 0.032843 , 0.033468 ]')
('valid-errors:', '[0.176199 , 0.022797 , 0.022777 , 0.023505 , 0.022394 , 0.022127 , 0.022476 , 0.022496 ]')
Mean Squared Error = 0.0219232620536
the total number of racee is 440
the total 1st place top 3 money is 421.496254
the total 2nd place top 3 money is 113.545076
OCTOBER 1st - 27th
the total number of racee is 440
the total 1st place top 3 money is 1189.686730
the total 2nd place top 3 money is -1067.194643
SEPTEMBER
the total number of racee is 607
the total 1st place top 3 money is 349.513570
the total 2nd place top 3 money is 64.334353
AUGUST
the total number of racee is 707
the total 1st place top 3 money is -2263.614601
the total 2nd place top 3 money is 817.286526
JULY
the total number of racee is 723
the total 1st place top 3 money is -841.205357
the total 2nd place top 3 money is -1289.409965
----------------------------------------
SEPTEMBER
the total number of racee is 607
the total 1st place top 3 money is -1742.457133
the total 2nd place top 3 money is -889.522457
OCTOBER
the total number of racee is 440
the total 1st place top 3 money is -1648.509848
the total 2nd place top 3 money is 110.558171
AUGUST
the total number of racee is 707
the total 1st place top 3 money is 801.202742
the total 2nd place top 3 money is -2185.000604
JULY
the total number of racee is 723
the total 1st place top 3 money is -224.026550
the total 2nd place top 3 money is -2572.454545


8 4 4 4 3 - hidden layer
the total number of racee is 440
the total 1st place top 3 money is -1592.710227
the total 2nd place top 3 money is -211.816625

8 5 5 4 3 - hidden layer
the total number of racee is 440
the total 1st place top 3 money is -795.491071
the total 2nd place top 3 money is -180.858333

8 5 3 4 3 - hidden layer
the total number of racee is 440
the total 1st place top 3 money is -40.035011
the total 2nd place top 3 money is -1446.104167

8 5 4 3 3 - hidden layer
('train-errors:', '[0.033936 , 0.033511 , 0.033388 , 0.03326  , 0.033241 , 0.033116 ]')
('valid-errors:', '[0.36386  , 0.022723 , 0.022702 , 0.022621 , 0.022551 , 0.022717 , 0.022876 ]')
Mean Squared Error = 0.0540244219574
the total number of racee is 440
the total 1st place top 3 money is -390.495779
the total 2nd place top 3 money is -2848.094697


8 5 4 4 4 - hidden layer
('train-errors:', '[0.034319 , 0.03384  , 0.03376  , 0.033702 , 0.033683 , 0.033669 , 0.033629 , 0.03359  , 0.033581 , 0.033589 ]')
('valid-errors:', '[1.71388  , 0.02349  , 0.023491 , 0.023981 , 0.023247 , 0.023308 , 0.023745 , 0.023047 , 0.023439 , 0.024071 , 0.024219 ]')
Mean Squared Error = 0.0539118922353
the total number of racee is 440
the total 1st place top 3 money is -228.939394
the total 2nd place top 3 money is -2140.642816

8 5 4 3 8 - hidden layer
the total number of racee is 440
the total 1st place top 3 money is -600.821928
the total 2nd place top 3 money is -583.060985

9 5 4 4 3 - hidden layer
the total number of racee is 440
the total 1st place top 3 money is -1450.854167
the total 2nd place top 3 money is -1945.666667

7 5 4 4 3 - hidden layer
the total number of racee is 440
the total 1st place top 3 money is -295.192370
the total 2nd place top 3 money is -1552.025974









NEW

2019
find out how often the horse with lowest odds wins / second lowest etc.

run the correlation stuff again to the results
add correlation for the best jockey + best trainer
add correlation for the best jockey + draw < 5
add correlation for the best trainer + draw < 5
add average odds of best jockey/trainer/horse winner in correlation functions

Can we use something other than feedforward (the other sort) for learning form?


DONE
try using only one hidden layer witn len(input) + len(output) / 2 nodes
  -- slightly worse result but only tested on one month

do legacy2 format for the 2016 results

------------------------------------------------------------------------------


###normalise the outputs for each horse (place-mean)/std-deviation##### -- see later point about normalisation
un-normalise the predicted output to find the placing (result*std-deviation)+mean

Try not limiting the training to only 20 races.
Or try limiting the races used to being between 5 and 10?

Try making the normalised output have range -1 to 1 instead of 0 to 1
Try using the gaussian normalisation on the output

Try training to one race first and then two and then three etc.
Try adding the last, last but one and last but two races to the inputs and then ignore the first three races...

Try adding the other horses average performance as input to the NN.  Have first second and third place horses as inputs.  Then in the
prediction phase put 0.5 in as all values (the results of the other horses should be normalised to fall in the range 0 to 1 where 0 is 
all first places.

check if any horse has won a race - don't be t on maiden races!

Extract class and use that as an input to the NN
Use a speed ratio from the last 4 races as an input.  Divide how much the horse was slow by, by the course record.  Add the 4 and divide by 4.

split the code into day, race, horse levels... 


DONE
calculate new mean and norm using the useful data
Removed the pastperformance mod stuff as it was just making the code look a mess
do a git commit to mark the end of the start of the introduction of the pybrain feature....
nomalise the output data using the formula (e-a)/(b-a).(d-c)+c where a and b are the old ranges and c,d are the desired ranges.
Stop using the traintoconvergence function as it uses some of the training data for validation.
activate the trained net on some test sets to see how accurate the training is.  If error greater than 5-10% then retrain...
Use the average speed instead of the position as the target in the net.
The jockey should be represented more by form, i.e. only consider the past 10 races
The trainer should be included as a field.  The form of the trainer is the last 10 race results for any horse trained by them.
extract the odds from the results so that profit and loss can also be calculated in the runTestDateRange
Make the jockey and trainer means and std-devs be based on races up to that date, not all races.
